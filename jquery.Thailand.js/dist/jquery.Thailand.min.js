/**
* @name jquery.Thailand.js
* @version 1.5.3.4
* @update Feb 27, 2018
* @website https://github.com/earthchie/jquery.Thailand.js
* @license WTFPL v.2 - http://www.wtfpl.net/
*
* @dependencies: jQuery <https://jquery.com/>
*              zip.js <https://github.com/gildas-lormeau/zip.js> (optional: for zip database_type only)
*              typeahead.js <https://twitter.github.io/typeahead.js/>
*              JQL.js <https://github.com/earthchie/JQL.js>
**/
$.Thailand = function (e) { "use strict"; e = $.extend({}, $.Thailand.defaults, e); var t = function (t) { var a, n = [], i = [], o = []; return t.lookup && t.words && (n = t.lookup.split("|"), i = t.words.split("|"), t = t.data), a = function (e) { return "number" == typeof e && (e = n[e]), e.replace(/[A-Z]/gi, function (e) { var t = e.charCodeAt(0); return i[t < 97 ? t - 65 : 26 + t - 97] }) }, t.map(function (t) { var n = 1; 3 === t.length && (n = 2), t[n].map(function (i) { i[n].map(function (r) { r[n] = r[n] instanceof Array ? r[n] : [r[n]], r[n].map(function (c) { var s = { district: a(r[0]), amphoe: a(i[0]), province: a(t[0]), zipcode: c }; (2 === n && (s.district_code = r[1] || !1, s.amphoe_code = i[1] || !1, s.province_code = t[1] || !1), !1 === e.$district) ? -1 === o.findIndex(function (e) { return e.zipcode == c && e.amphoe == a(i[0]) }) && o.push(s) : o.push(s) }) }) }) }), o }, a = function (e, t, n) { var i, o, r, c, s = 0, p = 0, d = 0, l = (e += "").length, h = (t += "").length; for (i = 0; i < l; i += 1)for (o = 0; o < h; o += 1) { for (r = 0; i + r < l && o + r < h && e.charAt(i + r) === t.charAt(o + r);)r += 1; r > d && (d = r, s = i, p = o) } return (c = d) && (s && p && (c += a(e.substr(0, p), t.substr(0, p), !1)), s + d < l && p + d < h && (c += a(e.substr(s + d, l - s - d), t.substr(p + d, h - p - d), !1))), !1 === n ? c : e === t ? 100 : l > h ? Math.floor(c / l * 100) : Math.floor(c / h * 100) }; !function (a) { if (null == $.Thailand.DB) { var n, i = e.database_type.toLowerCase(); switch ("json" !== i && "zip" !== i && (i = e.database.split(".").pop()), i) { case "json": $.getJSON(e.database, function (e) { a(new JQL(t(e))) }).fail(function (t) { throw new Error('File "' + e.database + '" is not exists.') }); break; case "zip": e.zip_worker_path || $("script").each(function () { var e = this.src.split("/"); "zip.js" === e.pop() && (zip.workerScriptsPath = e.join("/") + "/") }), (n = new XMLHttpRequest).responseType = "blob", n.onreadystatechange = function () { if (4 === n.readyState) { if (200 !== n.status) throw new Error('File "' + e.database + '" is not exists.'); zip.createReader(new zip.BlobReader(n.response), function (e) { e.getEntries(function (e) { e[0].getData(new zip.BlobWriter, function (e) { var n = new FileReader; n.onload = function () { a(new JQL(t(JSON.parse(n.result)))) }, n.readAsText(e) }) }) }) } }, n.open("GET", e.database), n.send(); break; default: throw new Error('Unknown database type: "' + e.database_type + '". Please define database_type explicitly (json or zip)') } } else a($.Thailand.DB) }(function (t) { $.Thailand.DB = t; var n, i, o = { empty: " ", suggestion: function (t) { e.$district && (t.district = t.district + " » "), t.zipcode && (t.zipcode = " » " + t.zipcode); var a = ""; return a += e.$district ? t.district + " » " : "", a += e.$amphoe ? t.amphoe + " » " : "", a += e.$province ? t.province + " » " : "", "<div>" + (a += e.$zipcode ? t.zipcode : "") + "</div>" } }, r = function (t, a) { for (n in e) i = n.replace("$", ""), n.indexOf("$") > -1 && e.hasOwnProperty(n) && e[n] && a[i] && e[n].typeahead("val", a[i]).trigger("change"); "function" == typeof e.onDataFill && (delete a.likely, e.onDataFill(a)) }, c = "object" == typeof e.templates ? Object.assign(o, e.templates) : o; for (n in e) n.indexOf("$") > -1 && "$search" !== n && e.hasOwnProperty(n) && e[n] && e[n].typeahead({ hint: !0, highlight: !0, minLength: 1 }, { limit: e.autocomplete_size, templates: c, source: function (e, a) { var n = [], i = this.$el.data("field"); try { n = t.select("*").where(i).match("^" + e).orderBy(i).fetch() } catch (e) { } a(n) }, display: function (e) { return e[this.$el.data("field")] } }).parent().find(".tt-dataset").data("field", n.replace("$", "")); for (n in e.$search && e.$search.typeahead({ hint: !0, highlight: !0, minLength: 2 }, { limit: e.autocomplete_size, templates: c, source: function (e, n) { var i = []; try { i = new JQL(i.concat(t.select("*").where("zipcode").match(e).fetch()).concat(t.select("*").where("province").match(e).fetch()).concat(t.select("*").where("amphoe").match(e).fetch()).concat(t.select("*").where("district").match(e).fetch()).map(function (e) { return JSON.stringify(e) }).filter(function (e, t, a) { return a.indexOf(e) == t }).map(function (t) { return (t = JSON.parse(t)).likely = [5 * a(e, t.district), 3 * a(e, t.amphoe.replace(/^เมือง/, "")), a(e, t.province), a(e, t.zipcode)].reduce(function (e, t) { return Math.max(e, t) }), t })).select("*").orderBy("likely desc").fetch() } catch (e) { } n(i) }, display: function (e) { return "" } }), e) n.indexOf("$") > -1 && e.hasOwnProperty(n) && e[n] && e[n].bind("typeahead:select typeahead:autocomplete", r).blur(function () { this.value || $(this).parent().find(".tt-dataset").html("") }); "function" == typeof e.onLoad && e.onLoad(), "function" == typeof e.onComplete && e.onComplete() }) }, $.Thailand.defaults = { database: "https://earthchie.github.io/jquery.Thailand.js/jquery.Thailand.js/database/db.json", database_type: "auto", zip_worker_path: !1, autocomplete_size: 20, onLoad: function () { }, onDataFill: function () { }, templates: !1, $district: !1, $district_code: !1, $amphoe: !1, $amphoe_code: !1, $province: !1, $province_code: !1, $zipcode: !1, $search: !1 }, $.Thailand.setup = function (e) { $.extend($.Thailand.defaults, e) };